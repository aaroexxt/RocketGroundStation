<!DOCTYPE html>
<html>
	<head>
		<title>RocketGroundStation</title>
		<link rel="stylesheet" href="css/bootstrap.min.css">
		<link rel="stylesheet" href="css/custom.css">
		<meta charset="utf-8">
    	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	</head>

	<body>
		<div id="main">
			<center>
				<canvas id="c-raw-gyro"></canvas>
				<canvas id="c-raw-accel"></canvas>
				<canvas id="c-ori-x"></canvas>
				<canvas id="c-ori-y"></canvas>
				<canvas id="c-ori-z"></canvas>
				<canvas id="c-title"></canvas>
			</center>
			<div id="m-left">
				<canvas id="c-state-ind"></canvas>
				<br>
				<canvas id="c-tvc-ind"></canvas>
				<br>
				<canvas id="c-raw-alt"></canvas>
			</div>
			<div id="m-right">
				<canvas id="c-yz-pos"></canvas>
				<br>
				<canvas id="c-yz-vel"></canvas>
				<br>
				<canvas id="c-vert-vel"></canvas>
			</div>
			<div class="vCenter" id="vContainer">
				<canvas id="c-ctrl-panel"></canvas>
			</div>
			
		</div>

		<nav class="nav fixed-bottom navbar-dark bg-dark justify-content-center">
			<li class="navbar-brand">
				<span id="connect-server-status" class="text-danger">Server Conn: NC</span> | <span id="connect-transmit-status" class="text-danger">Transmitter Conn: NC</span> | <span id="connect-vehicle-status" class="text-danger">Vehicle Conn: NC</span></li>
		</nav>

		<!-- <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script> -->
		
		<!--<script src="/js/three.min.js"></script>
		<script src="/js/STLLoader.js"></script>
		<script src="/js/OrbitControls.js"></script>
		<script src="/js/A_RocketViewer.js"></script>-->

		<script src="/js/A_Title.js"></script>
		<script src="/js/A_Graph.js"></script>
		<script src="/js/A_Bar.js"></script>
		<script src="/js/A_StateIndicator.js"></script>
		<script src="/js/A_ButtonMenu.js"></script>
		<script src="/js/A_TVCIndicator.js"></script>
		<script src="socket.io/socket.io.js"></script>
	</body>

	<script>
		let loc = window.location.href;
		var socket = io.connect(loc.substring(0, loc.length-1)+":"+(window.location.port||80), {
			withCredentials: true
		});

		let connectedTransmitter = connectedServer = connectedVehicle = false;
		socket.on('connect', () => {
			console.log("Connected to server");
			connectedServer = true;
			updateConnectionIndicator();
		});
		socket.on('disconnect', () => {
			console.log("Disconnected from server");
			connectedServer = false;
			updateConnectionIndicator();
		});

		const updateConnectionIndicator = () => {
			let statServer = document.getElementById("connect-server-status");
			statServer.innerHTML = "Server Conn: "+(connectedServer?"OK":"NC");
			statServer.className = (connectedServer?"":"text-danger");

			let statTransmit = document.getElementById("connect-transmit-status");
			statTransmit.innerHTML = "Transmitter Conn: "+(connectedTransmitter?"OK":"NC");
			statTransmit.className = (connectedTransmitter?"":"text-danger");

			let statVehicle = document.getElementById("connect-vehicle-status");
			statVehicle.innerHTML = "Vehicle Conn: "+(connectedVehicle?"OK":"NC");
			statVehicle.className = (connectedVehicle?"":"text-danger");
		}

		//Utility functions for resize
		function getPageWidth() {
		  return Math.max(
		    document.body.scrollWidth,
		    document.documentElement.scrollWidth,
		    document.body.offsetWidth,
		    document.documentElement.offsetWidth,
		    document.documentElement.clientWidth
		  );
		}

		function getPageHeight() {
		  return window.innerHeight;
		}

		let topGraphs = 5.5;
		let sideGraphs = 4;
		let topGraphDims = [(getPageWidth()-(Math.floor(topGraphs)*9))/topGraphs, (getPageHeight()-65)/sideGraphs];
		let sideGraphDims = [topGraphDims[0]*1.2, topGraphDims[1]];
		
		let fontMultiplier = getPageHeight()/900;

		let bufferGyro = [[], [], []]; //x, y, z
		let bufferAccel = [[], [], []]; //x, y, z
		let bufferAlt = [[]]; //alt
		const rawGyroGraph = new A_Graph("c-raw-gyro", {
			buffers: bufferGyro,
			colors: ["#ff0000", "#00ff00", "#0000ff"],
			drawZeroLine: true,
			width: topGraphDims[0],
			height: topGraphDims[1],
			title: "IMU Gyroscopes",
			titleX: "sec",
			titleY: "deg/sec",
			fontSizeMultiplier: fontMultiplier
		});
		const rawAccelGraph = new A_Graph("c-raw-accel", {
			buffers: bufferAccel,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#ff0000", "#00ff00", "#0000ff"],
			title: "IMU Accelerometers",
			titleX: "sec",
			titleY: "m/sec^2",
			fontSizeMultiplier: fontMultiplier
		});
		const rawAltGraph = new A_Graph("c-raw-alt", {
			buffers: bufferAlt,
			width: sideGraphDims[0],
			height: sideGraphDims[1],
			colors: ["#eae"],
			title: "Altitude",
			titleX: "sec",
			titleY: "m AGL",
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("data-gyro", data => {
			bufferGyro[0].push([data.x, data.time]);
			bufferGyro[1].push([data.y, data.time]);
			bufferGyro[2].push([data.z, data.time]);
		})
		socket.on("data-accel", data => {
			bufferAccel[0].push([data.x, data.time]);
			bufferAccel[1].push([data.y, data.time]);
			bufferAccel[2].push([data.z, data.time]);
		})

		const bufferOriX = [[]]; //x
		const bufferOriY = [[]]; //y
		const bufferOriZ = [[]]; //z
		const rawOriXGraph = new A_Graph("c-ori-x", {
			buffers: bufferOriX,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation X",
			titleX: "sec",
			titleY: "deg",
			fontSizeMultiplier: fontMultiplier
		});
		const rawOriYGraph = new A_Graph("c-ori-y", {
			buffers: bufferOriY,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation Y",
			titleX: "sec",
			titleY: "deg",
			fontSizeMultiplier: fontMultiplier
		});
		const rawOriZGraph = new A_Graph("c-ori-z", {
			buffers: bufferOriZ,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation Z",
			titleX: "sec",
			titleY: "deg",
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("data-ori", data => {
			bufferOriX[0].push([data.x, data.time]);
			bufferOriY[0].push([data.y, data.time]);
			bufferOriZ[0].push([data.z, data.time]);
		})

		const bufferYZPos = [[], []];
		const posYZGraph = new A_Graph("c-yz-pos", {
			buffers: bufferYZPos,
			width: sideGraphDims[0],
			height: sideGraphDims[1],
			colors: ["#f00", "#ff0"],
			title: "YZ Position",
			titleX: "sec",
			titleY: "m",
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("data-pos", data => {
			bufferYZPos[0].push([data.y, data.time]);
			bufferYZPos[1].push([data.z, data.time]);
			bufferAlt[0].push([data.x, data.time]);
		})

		const bufferVertVel = [[]];
		const vertVelGraph = new A_Graph("c-vert-vel", {
			buffers: bufferVertVel,
			width: sideGraphDims[0],
			height: sideGraphDims[1],
			colors: ["#f0f"],
			title: "Vertical Velocity",
			titleX: "sec",
			titleY: "m/sec",
			fontSizeMultiplier: fontMultiplier
		});

		const bufferYZVel = [[], []];
		const velYZGraph = new A_Graph("c-yz-vel", {
			buffers: bufferYZVel,
			width: sideGraphDims[0],
			height: sideGraphDims[1],
			colors: ["#f00", "#ff0"],
			title: "YZ Velocity",
			titleX: "sec",
			titleY: "m/sec",
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("data-vel", data => {
			bufferYZVel[0].push([data.y, data.time]);
			bufferYZVel[1].push([data.z, data.time]);
			bufferVertVel[0].push([data.x, data.time]);
		})


		const titleTiming = new A_Title("c-title", {
			width: topGraphDims[0]*0.5,
			height: topGraphDims[1],
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("v-connect", data => {
			if (connectedVehicle) return; //no double running that would reset timer
			titleTiming.startConnectTimer();
			connectedVehicle = true;
			updateConnectionIndicator();
		})
		socket.on("v-disconnect", data => {
			titleTiming.stopConnectTimer();
			connectedVehicle = false;
			updateConnectionIndicator();
		})
		socket.on("t-connect", data => {
			connectedTransmitter = true;
			controlPanel.enable();
			updateConnectionIndicator();
		})
		socket.on("t-disconnect", data => {
			connectedTransmitter = false;
			controlPanel.disable();
			updateConnectionIndicator();
		})
		socket.on("vot-set", vot => {
			titleTiming.setVOT(vot);
		})
		socket.on("met-set", met => {
			titleTiming.setMET(met);
		})
		socket.on("m-start", data => {
			titleTiming.startMissionTimer();
		})
		socket.on("m-stop", data => {
			titleTiming.stopMissionTimer();
		})

		const stateIndicator = new A_StateIndicator("c-state-ind", {
			width: sideGraphDims[0],
			height: sideGraphDims[1]*1.4,
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("v-state", data => {
			stateIndicator.updateData(data);
		})

		const controlPanel = new A_ButtonMenu("c-ctrl-panel", socket, {
			width: getPageWidth()-(2*topGraphDims[0])-(0.2*getPageWidth()),
			height: (getPageHeight()-topGraphDims[1])/1.5,
			buttonTBEdgeDistance: 0.0077*getPageHeight(),
			buttonRLEdgeDistance: 0.03*getPageWidth(),
			buttonDistance: 0.01*getPageWidth(),
			fontSizeMultiplier: fontMultiplier
		})
		document.getElementById("vContainer").style.height = (getPageHeight()-topGraphDims[1]-40)+"px";

		const TVCIndicator = new A_TVCIndicator("c-tvc-ind", {
			width: sideGraphDims[0],
			height: sideGraphDims[1]*0.6,
			fontSizeMultiplier: fontMultiplier
		});
		socket.on("v-tvc", data => {
			TVCIndicator.update({
				yDeg: data.y,
				zDeg: data.z,
				active: data.active,
				rollPercent: data.rollPercent,
				rollSetpoint: data.rollSetpoint,
				twr: data.twr,
				mass: data.mass
			})
		})
		socket.on("v-mass", data => {
			TVCIndicator.update({
				mass: data.mass,
				twr: data.twr
			})
		})
	</script>
</html>