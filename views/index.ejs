<!DOCTYPE html>
<html>
	<head>
		<title>RocketGroundStation</title>
		<link rel="stylesheet" href="css/bootstrap.min.css">
		<link rel="stylesheet" href="css/custom.css">
		<meta charset="utf-8">
    	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	</head>

	<body>
		<div id="main">
			<canvas id="c-raw-gyro"></canvas>
			<canvas id="c-raw-accel"></canvas>
			<canvas id="c-ori-x"></canvas>
			<canvas id="c-ori-y"></canvas>
			<canvas id="c-ori-z"></canvas>
			<canvas id="c-title"></canvas>
			<br>
			<canvas id="c-raw-alt"></canvas>
			<canvas id="c-yz-pos"></canvas>
			<canvas id="c-yz-vel"></canvas>
			<canvas id="c-state-ind"></canvas>
			<canvas id="c-vertvel"></canvas>
			
		</div>

		<nav class="nav fixed-bottom navbar-light bg-light justify-content-center">
			<li class="navbar-brand text-danger" id="connect-status">Connection Status: Disconnected</li>
		</nav>

		<!-- <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script> -->
		<script src="/js/A_Title.js"></script>
		<script src="/js/A_Graph.js"></script>
		<script src="/js/A_Bar.js"></script>
		<script src="/js/A_StateIndicator.js"></script>
		<script src="socket.io/socket.io.js"></script>
	</body>

	<script>
		let loc = window.location.href;
		var socket = io.connect(loc.substring(0, loc.length-1)+":"+(window.location.port||80), {
			withCredentials: true
		});

		socket.on('connect', () => {
			console.log("Connected to server");
			let stat = document.getElementById("connect-status");
			stat.innerHTML = "Connection Status: OK";
			stat.className = "navbar-brand";
		});
		socket.on('disconnect', () => {
			console.log("Disconnected from server");
			let stat = document.getElementById("connect-status");
			stat.innerHTML = "Connection Status: Disconnected";
			stat.className = "navbar-brand text-danger";
		});

		//Utility functions for resize
		function getPageWidth() {
		  return Math.max(
		    document.body.scrollWidth,
		    document.documentElement.scrollWidth,
		    document.body.offsetWidth,
		    document.documentElement.offsetWidth,
		    document.documentElement.clientWidth
		  );
		}

		function getPageHeight() {
		  return Math.max(
		    document.body.scrollHeight,
		    document.documentElement.scrollHeight,
		    document.body.offsetHeight,
		    document.documentElement.offsetHeight,
		    document.documentElement.clientHeight
		  );
		}

		let topGraphs = 5;
		let sideGraphs = 3;
		let topGraphDims = [(getPageWidth()-topGraphs*10)/5.5, 0];
		topGraphDims[1] = getPageHeight()/3.5;

		let bufferGyro = [[], [], []]; //x, y, z
		let bufferAccel = [[], [], []]; //x, y, z
		let bufferAlt = [[]]; //alt
		const rawGyroGraph = new A_Graph("c-raw-gyro", {
			buffers: bufferGyro,
			colors: ["#ff0000", "#00ff00", "#0000ff"],
			drawZeroLine: true,
			width: topGraphDims[0],
			height: topGraphDims[1],
			title: "IMU Gyroscopes",
			titleX: "sec",
			titleY: "deg/sec"
		});
		const rawAccelGraph = new A_Graph("c-raw-accel", {
			buffers: bufferAccel,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#ff0000", "#00ff00", "#0000ff"],
			title: "IMU Accelerometers",
			titleX: "sec",
			titleY: "m/sec^2"
		});
		const rawAltGraph = new A_Graph("c-raw-alt", {
			buffers: bufferAlt,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#000"],
			title: "Altitude",
			titleX: "sec",
			titleY: "m AGL"
		});
		socket.on("data-raw-gyro", data => {
			bufferGyro[0].push([data.x, data.time]);
			bufferGyro[1].push([data.y, data.time]);
			bufferGyro[2].push([data.z, data.time]);
		})
		socket.on("data-raw-accel", data => {
			bufferAccel[0].push([data.x, data.time]);
			bufferAccel[1].push([data.y, data.time]);
			bufferAccel[2].push([data.z, data.time]);
		})
		socket.on("data-raw-alt", data => {
			bufferAlt[0].push([data.alt, data.time]);
		})

		const bufferOriX = [[]]; //x
		const bufferOriY = [[]]; //y
		const bufferOriZ = [[]]; //z
		const rawOriXGraph = new A_Graph("c-ori-x", {
			buffers: bufferOriX,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation X",
			titleX: "sec",
			titleY: "deg"
		});
		const rawOriYGraph = new A_Graph("c-ori-y", {
			buffers: bufferOriY,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation Y",
			titleX: "sec",
			titleY: "deg"
		});
		const rawOriZGraph = new A_Graph("c-ori-z", {
			buffers: bufferOriZ,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#fff"],
			title: "Body Orientation Z",
			titleX: "sec",
			titleY: "deg"
		});
		socket.on("data-ori", data => {
			bufferOriX[0].push([data.x, data.time]);
			bufferOriY[0].push([data.y, data.time]);
			bufferOriZ[0].push([data.z, data.time]);
		})

		const bufferYZPos = [[], []];
		const posYZGraph = new A_Graph("c-yz-pos", {
			buffers: bufferYZPos,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#f00", "#ff0"],
			title: "YZ Position",
			titleX: "sec",
			titleY: "m"
		});
		socket.on("data-yz-pos", data => {
			bufferYZPos[0].push([data.yPos, data.time]);
			bufferYZPos[1].push([data.zPos, data.time]);
		})
		const bufferYZVel = [[], []];
		const velYZGraph = new A_Graph("c-yz-vel", {
			buffers: bufferYZVel,
			width: topGraphDims[0],
			height: topGraphDims[1],
			colors: ["#f00", "#ff0"],
			title: "YZ Velocity",
			titleX: "sec",
			titleY: "m/sec"
		});
		socket.on("data-yz-vel", data => {
			bufferYZVel[0].push([data.yVel, data.time]);
			bufferYZVel[1].push([data.zVel, data.time]);
		})


		const titleTiming = new A_Title("c-title", {
			width: getPageWidth()-(topGraphs*topGraphDims[0])-25,
			height: topGraphDims[1]
		});
		socket.on("v-connect", data => {
			titleTiming.startConnectTimer();
		})
		socket.on("v-disconnect", data => {
			titleTiming.stopConnectTimer();
		})
		socket.on("m-start", data => {
			titleTiming.startMissionTimer();
		})
		socket.on("m-stop", data => {
			titleTiing.stopMissionTimer();
		})

		const stateIndicator = new A_StateIndicator("c-state-ind", {
			width: topGraphDims[0]
		});
		socket.on("v-state", data => {
			stateIndicator.updateData(data);
		})

		/*
		Buttons

		Pyro Arm
		Pyro Disarm
		Vehicle Check
		Auto-Launch
		TVC Test
		Abort
		Calibrate Gyros
		Calibrate Accels
		*/
	</script>
</html>